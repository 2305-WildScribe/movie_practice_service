// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: wildscribe.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdventureService_GetAdventure_FullMethodName     = "/AdventureService/GetAdventure"
	AdventureService_GetAllAdventures_FullMethodName = "/AdventureService/GetAllAdventures"
	AdventureService_CreateAdventure_FullMethodName  = "/AdventureService/CreateAdventure"
	AdventureService_UpdateAdventure_FullMethodName  = "/AdventureService/UpdateAdventure"
	AdventureService_DeleteAdventure_FullMethodName  = "/AdventureService/DeleteAdventure"
)

// AdventureServiceClient is the client API for AdventureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdventureServiceClient interface {
	GetAdventure(ctx context.Context, in *GetAdventureRequest, opts ...grpc.CallOption) (*GetAdventureResponse, error)
	GetAllAdventures(ctx context.Context, in *GetAllAdventuresRequest, opts ...grpc.CallOption) (*GetAllAdventuresResponse, error)
	CreateAdventure(ctx context.Context, in *CreateAdventureRequest, opts ...grpc.CallOption) (*CreateAdventureResponse, error)
	UpdateAdventure(ctx context.Context, in *UpdateAdventureRequest, opts ...grpc.CallOption) (*UpdateAdventureResponse, error)
	DeleteAdventure(ctx context.Context, in *DeleteAdventureRequest, opts ...grpc.CallOption) (*DeleteAdventureResponse, error)
}

type adventureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdventureServiceClient(cc grpc.ClientConnInterface) AdventureServiceClient {
	return &adventureServiceClient{cc}
}

func (c *adventureServiceClient) GetAdventure(ctx context.Context, in *GetAdventureRequest, opts ...grpc.CallOption) (*GetAdventureResponse, error) {
	out := new(GetAdventureResponse)
	err := c.cc.Invoke(ctx, AdventureService_GetAdventure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adventureServiceClient) GetAllAdventures(ctx context.Context, in *GetAllAdventuresRequest, opts ...grpc.CallOption) (*GetAllAdventuresResponse, error) {
	out := new(GetAllAdventuresResponse)
	err := c.cc.Invoke(ctx, AdventureService_GetAllAdventures_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adventureServiceClient) CreateAdventure(ctx context.Context, in *CreateAdventureRequest, opts ...grpc.CallOption) (*CreateAdventureResponse, error) {
	out := new(CreateAdventureResponse)
	err := c.cc.Invoke(ctx, AdventureService_CreateAdventure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adventureServiceClient) UpdateAdventure(ctx context.Context, in *UpdateAdventureRequest, opts ...grpc.CallOption) (*UpdateAdventureResponse, error) {
	out := new(UpdateAdventureResponse)
	err := c.cc.Invoke(ctx, AdventureService_UpdateAdventure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adventureServiceClient) DeleteAdventure(ctx context.Context, in *DeleteAdventureRequest, opts ...grpc.CallOption) (*DeleteAdventureResponse, error) {
	out := new(DeleteAdventureResponse)
	err := c.cc.Invoke(ctx, AdventureService_DeleteAdventure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdventureServiceServer is the server API for AdventureService service.
// All implementations must embed UnimplementedAdventureServiceServer
// for forward compatibility
type AdventureServiceServer interface {
	GetAdventure(context.Context, *GetAdventureRequest) (*GetAdventureResponse, error)
	GetAllAdventures(context.Context, *GetAllAdventuresRequest) (*GetAllAdventuresResponse, error)
	CreateAdventure(context.Context, *CreateAdventureRequest) (*CreateAdventureResponse, error)
	UpdateAdventure(context.Context, *UpdateAdventureRequest) (*UpdateAdventureResponse, error)
	DeleteAdventure(context.Context, *DeleteAdventureRequest) (*DeleteAdventureResponse, error)
	mustEmbedUnimplementedAdventureServiceServer()
}

// UnimplementedAdventureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdventureServiceServer struct {
}

func (UnimplementedAdventureServiceServer) GetAdventure(context.Context, *GetAdventureRequest) (*GetAdventureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdventure not implemented")
}
func (UnimplementedAdventureServiceServer) GetAllAdventures(context.Context, *GetAllAdventuresRequest) (*GetAllAdventuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAdventures not implemented")
}
func (UnimplementedAdventureServiceServer) CreateAdventure(context.Context, *CreateAdventureRequest) (*CreateAdventureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdventure not implemented")
}
func (UnimplementedAdventureServiceServer) UpdateAdventure(context.Context, *UpdateAdventureRequest) (*UpdateAdventureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdventure not implemented")
}
func (UnimplementedAdventureServiceServer) DeleteAdventure(context.Context, *DeleteAdventureRequest) (*DeleteAdventureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdventure not implemented")
}
func (UnimplementedAdventureServiceServer) mustEmbedUnimplementedAdventureServiceServer() {}

// UnsafeAdventureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdventureServiceServer will
// result in compilation errors.
type UnsafeAdventureServiceServer interface {
	mustEmbedUnimplementedAdventureServiceServer()
}

func RegisterAdventureServiceServer(s grpc.ServiceRegistrar, srv AdventureServiceServer) {
	s.RegisterService(&AdventureService_ServiceDesc, srv)
}

func _AdventureService_GetAdventure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdventureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdventureServiceServer).GetAdventure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdventureService_GetAdventure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdventureServiceServer).GetAdventure(ctx, req.(*GetAdventureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdventureService_GetAllAdventures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAdventuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdventureServiceServer).GetAllAdventures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdventureService_GetAllAdventures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdventureServiceServer).GetAllAdventures(ctx, req.(*GetAllAdventuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdventureService_CreateAdventure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdventureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdventureServiceServer).CreateAdventure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdventureService_CreateAdventure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdventureServiceServer).CreateAdventure(ctx, req.(*CreateAdventureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdventureService_UpdateAdventure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdventureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdventureServiceServer).UpdateAdventure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdventureService_UpdateAdventure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdventureServiceServer).UpdateAdventure(ctx, req.(*UpdateAdventureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdventureService_DeleteAdventure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdventureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdventureServiceServer).DeleteAdventure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdventureService_DeleteAdventure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdventureServiceServer).DeleteAdventure(ctx, req.(*DeleteAdventureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdventureService_ServiceDesc is the grpc.ServiceDesc for AdventureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdventureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AdventureService",
	HandlerType: (*AdventureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAdventure",
			Handler:    _AdventureService_GetAdventure_Handler,
		},
		{
			MethodName: "GetAllAdventures",
			Handler:    _AdventureService_GetAllAdventures_Handler,
		},
		{
			MethodName: "CreateAdventure",
			Handler:    _AdventureService_CreateAdventure_Handler,
		},
		{
			MethodName: "UpdateAdventure",
			Handler:    _AdventureService_UpdateAdventure_Handler,
		},
		{
			MethodName: "DeleteAdventure",
			Handler:    _AdventureService_DeleteAdventure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wildscribe.proto",
}

const (
	UserService_LoginUser_FullMethodName    = "/UserService/LoginUser"
	UserService_CreateUser_FullMethodName   = "/UserService/CreateUser"
	UserService_UpdateUser_FullMethodName   = "/UserService/UpdateUser"
	UserService_DeleteUser_FullMethodName   = "/UserService/DeleteUser"
	UserService_ValidateUser_FullMethodName = "/UserService/ValidateUser"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	ValidateUser(ctx context.Context, in *ValidateUserRequest, opts ...grpc.CallOption) (*ValidateUserResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, UserService_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ValidateUser(ctx context.Context, in *ValidateUserRequest, opts ...grpc.CallOption) (*ValidateUserResponse, error) {
	out := new(ValidateUserResponse)
	err := c.cc.Invoke(ctx, UserService_ValidateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	ValidateUser(context.Context, *ValidateUserRequest) (*ValidateUserResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) ValidateUser(context.Context, *ValidateUserRequest) (*ValidateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateUser not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ValidateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ValidateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ValidateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ValidateUser(ctx, req.(*ValidateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginUser",
			Handler:    _UserService_LoginUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "ValidateUser",
			Handler:    _UserService_ValidateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wildscribe.proto",
}
